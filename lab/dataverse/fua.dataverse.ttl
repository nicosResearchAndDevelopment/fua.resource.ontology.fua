    ## region upper concepts
## order ALPHA
@prefix dct:   <http://purl.org/dc/terms/> .
@prefix fno:   <https://w3id.org/function/ontology#> .
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .
@prefix odrl:  <http://www.w3.org/ns/odrl/2/> .
@prefix org:   <http://www.w3.org/ns/org#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix qudt:  <http://qudt.org/schema/qudt/> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:    <http://www.w3.org/ns/shacl#> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix time:  <http://www.w3.org/2006/time#>.
@prefix unit:  <http://qudt.org/vocab/unit/> .
@prefix vann:  <http://purl.org/vocab/vann/> .
@prefix voaf:  <http://purl.org/vocommons/voaf#> .
@prefix void:  <http://rdfs.org/ns/void#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
## endregion upper concepts

@prefix nrd:   <https://www.nicos-rd.com/> .
@prefix fua:   <https://www.nicos-rd.com.org/fua#> .
@prefix gbx:   <https://www.nicos-rd.com/fua/gaiabox#> .

@prefix dave:  <https://www.nicos-rd.com/fua/dataverse#> .

dave:
    a                             voaf:Vocabulary ;
    a                             owl:Ontology ;
    skos:prefLabel                "DataVerseModel"^^xsd:string ;
    rdfs:label                    "DataVerse Model"@en ;
    dct:title                     "DataVerse-Model for Data Spaces"@en ;
    dct:description               """The 'DataVerse-Model for Data Spaces' aims to organize joint or disjoint Data Spaces. It does not cover data-modelling of data transported on applications-layer (transported by 'data-provider' and 'data-consumer') in given and "living, productive" eco-system, exchanging real-word data.
The 'DataVerse-Model' has a strong focus on 'The Organization Ontology', W3C, to be enriched with all those."""@en ;
## TODO : cc:license                    <http://www.apache.org/licenses/LICENSE-2.0> ;
    dct:creator                   <https://github.com/jlangkau> ;
    dct:creator                   <https://jlangkau.solidweb.org/> ;
    dct:publisher                 <http://www.nicos-rd.com/> ;
    dct:created                   "2021-11-29"^^xsd:date ;
    dct:modified                  "2022-05-12"^^xsd:date ; ## REM : replaced by assembly
    owl:versionInfo               "0.0.2" ;
    vann:preferredNamespaceUri    "https://www.nicos-rd.com/fua/dataverse#" ;
    vann:preferredNamespacePrefix "dave:" ;
    void:vocabulary               vann:, void:, voaf:, dct: ;
    void:vocabulary               org: ;
    void:vocabulary               fua: ;
    rdfs:comment                  """The 'DataVerse-Model for Data Spaces' does not aim to cover well-known ontologies, like "Friend of a Friend" ('foaf') or "The Organization Ontology" ('org'). Expressing sub-classes only tries to enrich given parent classes.
The 'DataVerse-Model for Data Spaces' defines classes and properties for describing and organising Data Spaces."""@en ;
    rdfs:seeAlso                  "https://www.w3.org/TR/vocab-org/" ; ## TODO : check it
    rdfs:isDefinedBy              nrd: ;
. # dave:


dave:DataVerse
    a                owl:Class ;
    ## TBC: a fua:Narration ;
    a                gbx:GAIAboX ; ## REM: owl:Thing, foaf:Agent
    rdfs:subClassOf  foaf:Agent ;
    rdfs:subClassOf  dave:EcoSystem ;
    skos:notation    "DataVerse"^^xsd:string ;
    skos:prefLabel   "DataVerse Class"^^xsd:string ;
    rdfs:label       "Class of DataVerses"@en ;
    rdfs:label       "Klasse der DataVerses"@de ;
    rdfs:isDefinedBy nrd: ;
.

dave:dataVerse
    a                owl:ObjectProperty ;
    skos:notation    "dataVerse"^^xsd:string ;
    skos:prefLabel   "DataVerse"^^xsd:string ;
    rdfs:label       "DataVerse"@en ;
    rdfs:label       "DataVerse"@de ;
    dct:description  """Arbitrary property to bind a given DataVerse."""@en ;
    rdfs:range       dave:DataVerse ;
    rdfs:isDefinedBy dave: .

dave:acronym
    a                  owl:DatatypeProperty ;
    rdfs:subPropertyOf skos:notation ;
    skos:notation      "acronym"^^xsd:string ;
    skos:prefLabel     "Acronym"^^xsd:string ;
    dct:description    """Due to the nature of 'skos:notation' (and dave:acronym is a sub property of skos:notation) it **MUST** be unique among all acronyms in 'dave:dave'."""@en ;
    rdfs:label         "Acronym"@en ;
    rdfs:label         "Akronym"@de ;
    rdfs:range         xsd:string ;
    rdfs:isDefinedBy   dave: .

## region Eco System

dave:EcoSystem
    a                owl:Class ;
    rdfs:subClassOf  org:OrganizationalCollaboration ;
    skos:notation    "EcoSystem"^^xsd:string ;
    skos:prefLabel   "Eco-System Class"^^xsd:string ;
    rdfs:label       "Class of Eco-Systems"@en ;
    rdfs:label       "Klasse der Eco-Systems"@de ;
    ## region property
    # 0..n
    # REM : there can be an Eco-System _without_ containing any Data Space.
    # dave:ecoSystem [ a dave:EcoSystem ];
    # 0..n
    # REM : containing all (known) Data Spaces - even if an individual has NO Eco-System declared.
    # dave:dataSpace [ a dave:DataSpace ];
    ## endregion property
    rdfs:isDefinedBy dave: .

dave:ecoSystem
    a                owl:ObjectProperty ;
    skos:notation    "ecoSystem"^^xsd:string ;
    skos:prefLabel   "Eco-System Property"^^xsd:string ;
    rdfs:label       "Eco-System"@en ;
    rdfs:label       "Eco-System"@de ;
    dct:description  """Arbitrary property to bind a given Eco-System."""@en ;
    rdfs:domain      dave:DataVerse ;
    rdfs:domain      dave:DataSpace ;
    rdfs:range       dave:EcoSystem ;
    rdfs:isDefinedBy dave: .

## endregion Eco System

## region Domain

dave:Domain
    a                owl:Class ;
    rdfs:subClassOf  org:OrganizationalCollaboration ;
    skos:notation    "Domain"^^xsd:string ;
    skos:prefLabel   "Domain Class"^^xsd:string ;
    dave:acronym     "DD"^^xsd:string ;
    rdfs:label       "Class of Domains"@en ;
    rdfs:label       "Klasse der Dom채nen"@de ;
    ## region property
    # 0..1
    # REM : the Eco System responsible bringing Data Agents to life.
    # dave:ecoSystem [ a dave:EcoSystem ];
    ## endregion property
    rdfs:isDefinedBy dave: .

dave:DataSpace
    a                owl:Class ;
    skos:notation    "DataSpace"^^xsd:string ;
    skos:prefLabel   "Data Space Class"^^xsd:string ;
    dave:acronym     "DS"^^xsd:string ;
    rdfs:label       "Class of Data Spaces"@en ;
    rdfs:label       "Klasse der Datenr채ume"@de ;
    owl:sameAs       dave:DataDomain ;
    rdfs:isDefinedBy dave: .

dave:domain ## TODO : switch to domain
    a                owl:ObjectProperty ;
    skos:notation    "domain"^^xsd:string ;
    skos:prefLabel   "Domain Property"^^xsd:string ;
    rdfs:label       "Domain"@en ;
    rdfs:label       "Dom채ne"@de ;
    dct:description  """Arbitrary property to bind a given Domain."""@en ;
    rdfs:domain      dave:DataVerse ; ## TBC:
    rdfs:domain      dave:EcoSystem ;
    # 0..1
    rdfs:range       ( dave:DataDomain dave:DataSpace ) ;
    rdfs:isDefinedBy dave: .

## endregion Domain

dave:Authority
    ## REM : abstract?!?
    a                owl:Class ;
    rdfs:subClassOf  foaf:Agent ;
    skos:notation    "Authority"^^xsd:string ;
    skos:prefLabel   "Authority Class"^^xsd:string ;
    rdfs:label       "Class of Authorities"@en ;
    rdfs:label       "Klasse der Autorit채ten"@de ;
    dct:description  """Instances of this class will express overarching responsibility for given Data Space."""@en ;
    rdfs:isDefinedBy dave: .

dave:TrustAuthority
    a                owl:Class ;
    rdfs:subClassOf  dave:Authority ;
    skos:notation    "TrustAuthority"^^xsd:string ;
    skos:prefLabel   "Trust Authority Class"^^xsd:string ;
    rdfs:label       "Class of Trust Authorities"@en ;
    rdfs:label       "Klasse der Vertrauensstellen"@de ;
    dct:description  """The agent (organization or maybe a person) producing the base of trust."""@en ;
    rdfs:comment     """One of the most known type might be the 'Certification Body', like 'dave:CertificationBody'."""@en ;
    rdfs:isDefinedBy dave: .

dave:Notarization
    a                owl:Class ;
    rdfs:subClassOf  dave:TrustAuthority ;
    skos:notation    "Notarization"^^xsd:string ;
    skos:prefLabel   "Notarization Class"^^xsd:string ;
    dave:acronym     "NOTA"^^xsd:string ;
    rdfs:label       "Class of Notarizations"@en ;
    rdfs:label       "Klasse der 'Notarizations'"@de ;
    rdfs:isDefinedBy dave: .

dave:CertificationBody
    a                owl:Class ;
    rdfs:subClassOf  dave:Notarization ;
    owl:sameAs       dave:Notarization ;
    rdfs:isDefinedBy dave: .

dave:CertificateAuthority
    a                owl:Class ;
    rdfs:subClassOf  dave:TrustAuthority ;
    skos:notation    "CertificateAuthority"^^xsd:string ;
    skos:prefLabel   "Certification Authority Class"^^xsd:string ;
    dave:acronym     "CA"^^xsd:string ;
    rdfs:label       "Class of Certificate Authorities"@en ;
    rdfs:label       "Klasse der 'Certificate Authorities'"@de ;
    rdfs:comment     """Certificate Authority handles the good, ol' X.509 certificates."""@en ;
    rdfs:isDefinedBy dave: .

dave:IdentityProvider
    a                owl:Class ;
    skos:notation    "IdentityProvider"^^xsd:string ;
    skos:prefLabel   "Identity Provider Class"^^xsd:string ;
    rdfs:label       "Class of Identity Providers"@en ;
    rdfs:label       "Klasse der Identity Providers"@de ;
#    dct:description  """."""@en ;
    rdfs:comment     """**NOT** as an agent! It does not act itself. The acting agents are 'dave:TrustAuthority', 'CertificationBody'"""@en ;
    rdfs:isDefinedBy dave: .

## region Service
## region Service :: ServiceModel
dave:ServiceModel
    # REM : abstract
    a                owl:Class ;
    skos:notation    "ServiceModel"^^xsd:string ;
    skos:prefLabel   "Service Model Class"^^xsd:string ;
    rdfs:label       "Class of Service Models"@en ;
    rdfs:label       "Klasse der Service-Modelle"@de ;
    rdfs:isDefinedBy dave: .

dave:serviceModel
    a                owl:ObjectProperty ;
    skos:notation    "serviceModel"^^xsd:string ;
    skos:prefLabel   "Service Model"^^xsd:string ;
    rdfs:label       "Service Model"@en ;
    rdfs:label       "Servicemodell"@de ;
    rdfs:domain      dave:ServiceInstance ;
    # 0..1
    rdfs:range       dave:ServiceModel ;
    rdfs:isDefinedBy dave: .
## endregion Service :: ServiceModel

## region Service :: ServiceInstance
dave:ServiceInstance
    # REM : abstract
    a                owl:Class ;
    rdfs:subClassOf  foaf:Agent ;
    skos:notation    "ServiceInstance"^^xsd:string ;
    skos:prefLabel   "Service Instance Class"^^xsd:string ;
    rdfs:label       "Class of Service Instances"@en ;
    rdfs:label       "Klasse der Service-Instanzen"@de ;
    rdfs:isDefinedBy dave: .

## region Service :: ServiceInstance :: ServiceEndpoint

dave:ServiceEndpoint
    a                owl:Class ;
    rdfs:subClassOf  foaf:Agent ;
    skos:notation    "ServiceEndpoint"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Class"^^xsd:string ;
    rdfs:label       "Class of Service Endpoints"@en ;
    rdfs:label       "Klasse der Service-Endpunkte"@de ;
    rdfs:isDefinedBy dave: .

dave:serviceEndpointSchema
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointSchema"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Schema"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Schema'"@en ;
    rdfs:label       "Service Endpunkt 'Schema'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    rdfs:range       xsd:string ; ## EXAMPLE: 'http'
    rdfs:isDefinedBy dave: .

dave:serviceEndpointSecure
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointSecure"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Secure"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Secure'"@en ;
    rdfs:label       "Service Endpunkt 'Secure'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    rdfs:range       xsd:boolean ; ## EXAMPLE: 'true'
    rdfs:isDefinedBy dave: .

dave:serviceEndpointHost
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointHost"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Host"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Host'"@en ;
    rdfs:label       "Service Endpunkt 'Host'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    rdfs:range       xsd:string ; ## EXAMPLE: '0.0.0.0'
    rdfs:isDefinedBy dave: .

dave:serviceEndpointPort
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointPort"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Port"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Port'"@en ;
    rdfs:label       "Service Endpunkt 'Port'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    rdfs:range       xsd:nonNegativeInteger ; ## EXAMPLE: '80'
    rdfs:isDefinedBy dave: .

dave:serviceEndpointRoot
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointRoot"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Root"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Root'"@en ;
    rdfs:label       "Service Endpunkt 'Root'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    rdfs:range       xsd:string ; ## EXAMPLE: '/', default = ""
    rdfs:isDefinedBy dave: .

dave:serviceEndpointCredential
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpointCredential"^^xsd:string ;
    skos:prefLabel   "Service Endpoint Credential"^^xsd:string ;
    rdfs:label       "Service Endpoint 'Credential'"@en ;
    rdfs:label       "Service Endpunkt 'Credential'"@de ;
    rdfs:domain      dave:ServiceEndpoint ;
    ## EXAMPLE: 'rdfs:range' :: '{"user": "me", "secret": "ahoi"}', default = "" (so, undefined)
    ## EXAMPLE: 'rdfs:range' :: "key.ahoi(me).sign", default = "" (so, undefined)
    rdfs:range       xsd:string ;
    rdfs:isDefinedBy dave: .
## endregion Service :: ServiceInstance :: ServiceEndpoint

dave:serviceEndpoint
    a                owl:ObjectProperty ;
    skos:notation    "serviceEndpoint"^^xsd:string ;
    skos:prefLabel   "Service Endpoint"^^xsd:string ;
    rdfs:label       "Service Endpoint"@en ;
    rdfs:label       "Service-Endpunkt"@de ;
    rdfs:domain      dave:ServiceInstance ;
    rdfs:range       dave:ServiceEndpoint ;
    rdfs:isDefinedBy dave: .

dave:serviceInstance
    a                owl:ObjectProperty ;
    skos:notation    "serviceInstance"^^xsd:string ;
    skos:prefLabel   "Service Instance"^^xsd:string ;
    rdfs:label       "Service Instance"@en ;
    rdfs:label       "Serviceinstanz"@de ;
    rdfs:domain      dave:EcoSystem ;
    rdfs:range       dave:ServiceInstance ;
    rdfs:isDefinedBy dave: .

## endregion Service :: ServiceInstance

## endregion Service

## region Data Agent Role

dave:DataAgentRole
    # REM : abstract
    a                owl:Class ;
    rdfs:subClassOf  org:Role ;
    skos:notation    "DataAgentRole"^^xsd:string ;
    skos:prefLabel   "Data Agent Class"^^xsd:string ;
    rdfs:label       "Class of Agent Roles on Data"@en ;
    rdfs:label       "Klasse der Agenten-Rollen auf Daten"@de ;
    rdfs:isDefinedBy dave: .

dave:dataAgentRole
    a                owl:ObjectProperty ;
    skos:notation    "dataAgentRole"^^xsd:string ;
    skos:prefLabel   "Data Agent Role"^^xsd:string ;
    rdfs:label       "'Data Agent' Role"@en ;
    rdfs:label       "'Data Agent' Rolle"@de ;
    rdfs:domain      dave:ServiceInstance ;
    # 0..1
    rdfs:range       dave:DataAgentRole ;
    rdfs:isDefinedBy dave: .

## region Data Agent Role :: Individuals

dave:UNSPECIFIC
    a                dave:DataAgentRole ;
    skos:notation    "UNSPECIFIC"^^xsd:string ;
    skos:prefLabel   "Agent Role is not specified"^^xsd:string ;
    rdfs:label       "Agent Role 'NOT sepecified'"@en ;
    rdfs:label       "Agent Rolle 'NOT spezifiziert'"@de ;
    rdfs:isDefinedBy dave: .

dave:DATA_CONSUMER
    a                dave:DataAgentRole ;
    skos:notation    "DATA_CONSUMER"^^xsd:string ;
    skos:prefLabel   "Agent Role as Data Consumer"^^xsd:string ;
    rdfs:label       "Agent Role 'Data Consumer'"@en ;
    rdfs:label       "Agent Rolle 'Datenkonsument'"@de ;
    rdfs:isDefinedBy dave: .

dave:DATA_PROVIDER
    a                dave:DataAgentRole ;
    skos:notation    "DATA_PROVIDER"^^xsd:string ;
    skos:prefLabel   "Agent Role as Data Provider"^^xsd:string ;
    rdfs:label       "Agent Role 'Data Provider'"@en ;
    rdfs:label       "Agent Rolle 'Datenbereitsteller'"@de ;
    rdfs:isDefinedBy dave: .

## endregion Data Agent Role :: Individuals

## endregion Data Agent Role

## region Data Layer

dave:DataLayer
    # REM : abstract
    a                owl:Class ;
    skos:notation    "DataLayer"^^xsd:string ;
    skos:prefLabel   "Data Layer Class"^^xsd:string ;
    rdfs:label       "Class of Data Layers"@en ;
    rdfs:label       "Klasse der Datenschichten"@de ;
    rdfs:comment     """If we like to say so, we can extend the OSI-Model the way adding layer on top of layer 7 (application layer)."""@en ;
    rdfs:seeAlso     <https://en.wikipedia.org/wiki/OSI_model> ;
    rdfs:isDefinedBy dave: .

dave:dataLayer
    a                owl:ObjectProperty ;
    skos:notation    "dataLayer"^^xsd:string ;
    skos:prefLabel   "Data Layer"^^xsd:string ;
    rdfs:label       "Data Layer"@en ;
    rdfs:label       "Data Layer"@de ;
    rdfs:domain      dave:ServiceInstance ;
    # 1..2                                      # REM : "Yes", it can be hybrid!
    rdfs:range       dave:DataLayer ;
    rdfs:isDefinedBy dave: .

dave:dataLayerNumericPosition
    a                owl:DatatypeProperty ;
    skos:notation    "dataLayerNumericPosition"^^xsd:string ;
    skos:prefLabel   "Data Layer Numeric Position"^^xsd:string ;
    rdfs:label       "Data Layer Numeric Position"@en ;
    rdfs:label       "Data Layer numerische Position"@de ;
    rdfs:domain      dave:DataLayer ;
    # 0..1, '8' <= value <= '9'
    rdfs:range       xsd:nonNegativeInteger ;
    rdfs:isDefinedBy dave: .

## region Data Layer Individuals

dave:dataLayer_META
    a                             dave:DataLayer ;
    skos:notation                 "dataLayer_META"^^xsd:string ;
    dave:dataLayerNumericPosition "8"^^xsd:nonNegativeInteger ;
    skos:prefLabel                "Data Layer 'Meta'"^^xsd:string ;
    rdfs:label                    "Data Layer 'Meta'"@en ;
    rdfs:label                    "Data Layer 'Meta'"@de ;
    dct:description               """All information transported on this Layer, are by a Meta-Model."""@en ;
    rdfs:comment                  """EXAMPLE: http-header 'Content-Length'."""@en ;
    rdfs:isDefinedBy              dave: .

dave:dataLayer_PERSISTENCE
    a                             dave:DataLayer ;
    skos:notation                 "dataLayer_PERSISTENCE"^^xsd:string ;
    dave:dataLayerNumericPosition "8"^^xsd:nonNegativeInteger ;
    skos:prefLabel                "Data Layer 'Persistence'"^^xsd:string ;
    rdfs:label                    "Data Layer 'Persistence'"@en ;
    rdfs:label                    "Data Layer 'Persistence'"@de ;
#    dct:description               """."""@en ;
#    rdfs:comment                  """."""@en ;
    rdfs:isDefinedBy              dave: .

dave:dataLayer_INFRASTRUCTURE
    a                             dave:DataLayer ;
    skos:notation                 "dataLayer_INFRASTRUCTURE"^^xsd:string ;
    dave:dataLayerNumericPosition "8"^^xsd:nonNegativeInteger ;
    skos:prefLabel                "Data Layer 'Infrastructure'"^^xsd:string ;
    rdfs:label                    "Data Layer 'Infrastructure'"@en ;
    rdfs:label                    "Data Layer 'Infrastruktur'"@de ;
    dct:description               """All information transported on this Layer, are described by given Eco-System
regarding its schema or model. This classification of data targets to all those operations, etc. those are crucial
for given agent, to act in ones Eco System."""@en ;
    rdfs:comment                  """EXAMPLE: given identity-requester (a 'dave:ServiceInstance' with
role 'dave:dataAgent_CONSUMER') requests [ a ex:request_token "it_is_me"^^xsd:string . ] data and
identity-provider-service (a 'dave:ServiceInstance' with role 'dave:dataAgent_PROVIDER') responses
[ a ex:token "it_is_you!"^^xsd:string . ] will be transported on the data-layer 'dave:dataLayer_INFRASTRUCTURE'."""@en ;
    rdfs:isDefinedBy              dave: .

dave:dataLayer_MAIN
    a                             dave:DataLayer ;
    skos:notation                 "dataLayer_MAIN"^^xsd:string ;
    dave:dataLayerNumericPosition "9"^^xsd:nonNegativeInteger ;
    skos:prefLabel                "Data Layer 'Main'"^^xsd:string ;
    rdfs:label                    "Data Layer 'Main'"@en ;
    rdfs:label                    "Daten Layer 'Main'"@de ;
    dct:description               """All information transported on this Layer, are described by given use case-specific
vocabulary, schema, model."""@en ;
    rdfs:comment                  """REM: What is 'main' lies in the agents eye! Sometimes given agent focus on
meta-data only and classifies it as being 'main' - from its perspective...
EXAMPLE: given data-consumer (a 'dave:ServiceInstance' with role 'dave:dataAgent_CONSUMER')
requests [ a ex:command "greet_me"^^xsd:string . ] data and data-provider (a 'dave:ServiceInstance' with role
'dave:dataAgent_PROVIDER') responses [ a ex:result "Hello World!"^^xsd:string . ] will be transported on the
data-layer 'dave:dataLayer_PRODUCTIVE'."""@en ;
    rdfs:isDefinedBy              dave: .

## endregion Data Layer Individuals

## endregion DataLayer

## EOF fua.dataverse.ttl